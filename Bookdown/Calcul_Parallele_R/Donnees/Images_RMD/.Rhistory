setnames(cereales3,"poids","poids_cons") # Pour renommer la colonne poids en poids consommé
cereales3[,poids_cons:=as.numeric(poids_cons)]  # Pour convertir en numerique
cereales3[,qtty_cons_kg:= poids_cons*Qtty_cons/1000]  # On divise par 1000 car les quanntités sont en gramme
cereales3[,depen_cons:= prix_unit*qtty_cons_kg]
cereales4[,prix_unit:= Value_achat/qtty_achat_kg]
cereales3[,depen_cons:= prix_unit*qtty_cons_kg]
prix_unit:= Value_achat/qtty_achat_kg
cereales4[,poids_achat:=as.numeric(poids_achat)]  # Pour convertir en numerique
cereales4[,qtty_achat_kg:= poids_achat*Qtty_achat/1000]  # On divise par 1000 car les quanntités sont en gramme
names(cereales4)
cereales4[,prix_unit:= Value_achat/qtty_achat_kg]
cereales4[,poids_cons:=as.numeric(poids_achat)]  # Pour convertir en numerique
cereales4[,qtty_cons_kg:= poids_cons*Qtty_cons/1000]  # On divise par 1000 car les quanntités sont en gramme
cereales3[,depen_cons:= prix_unit*qtty_cons_kg]
cereales4[,depen_cons:= prix_unit*qtty_cons_kg]
names(cereales4)
# Calcul de l'intervalle interquartile
Q1 <- quantile(cereales4$qtty_cons_kg, 0.25)
Q1 <- quantile(cereales4$qtty_cons_kg, 0.25)
cereales4 <- cereales4[!(is.na(cereales4$Qtty_achat)),]
Q1 <- quantile(cereales4$qtty_cons_kg, 0.25)
Q3 <- quantile(cereales4$qtty_cons_kg, 0.75)
IQR <- Q3 - Q1
upper_bound <- Q3 + 1.5 * IQR
lower_bound <- Q1 - 1.5 * IQR
summary(cereales4)
glimpse(cereales4)
dim(cereales4)
cereales4 <- cereales4[cereales4$qtty_cons_kg >= lower_bound
& cereales4$qtty_cons_kg <= upper_bound, ]
dim(cereales4)
dim(cereales)
library(readxl)
Table_de_conversion<- read_excel(
"E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/ISEPcoursR2024/Table de conversion phase 2.xlsx")
Table_de_conversion$...8 <- NULL
Table_de_conversion$...9 <- NULL
# Fusion des base cerales et table de conversion
library(haven)
cereales <- read_dta(paste0("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/ISEPcoursR2024/cereales.dta"))
colnames(cereales)[4:14] <- c("AutresCereales","Qtty_cons",
"Unite_cons","Taille_cons",
"AutoCons","AutresProv",
"DernierAchat","Qtty_achat",
"Unite_achat","Taille_achat",
"Value_achat")
mergee <- merge(cereales, Table_de_conversion,
by.x=c("cereales__id", "Unite_achat", "Taille_achat"),
by.y=c("produitID", "uniteID", "tailleID"),
all.x = TRUE)
# Verifions s'il y a les valeurs manquantes
anyNA(mergee$Qtty_achat)  # Ca renvoie true donc il y en a et on va donc les supprimer
# Supprimons donc ces valeurs manquantes
mergee <- mergee[!(is.na(mergee$Qtty_achat)),]
# Calculons la quantité consommée en kg
library(data.table)
cereales4 <- data.table(mergee)
setnames(cereales4,"poids","poids_achat") # Pour renommer la colonne poids en poids acheté
cereales4[,poids_achat:=as.numeric(poids_achat)]  # Pour convertir en numerique
cereales4[,qtty_achat_kg:= poids_achat*Qtty_achat/1000]  # On divise par 1000 car les quanntités sont en gramme
# Calculons le prix unitaire
cereales4[,prix_unit:= Value_achat/qtty_achat_kg]
# Calculons les dépenses de consommation
### RECONDUISONS LA QUANTITE TOTALE CONSOMMEE
cereales4[,qtty_cons_kg:= poids_cons*Qtty_cons/1000]
cereales4[,qtty_cons_kg:= poids_achat*Qtty_cons/1000]
### Calcul des depenses de consommation proprement dites
cereales4[,depen_cons:= prix_unit*qtty_cons_kg]
#Correction des valeurs aberrantes
# Calcul de l'intervalle interquartile
# On supprime au préalable les valeurs manquantes
cereales4 <- cereales4[!(is.na(cereales4$Qtty_achat)),]
Q1 <- quantile(cereales4$qtty_achat_kg, 0.25)
Q3 <- quantile(cereales4$qtty_achat_kg, 0.75)
IQR <- Q3 - Q1
# Définition des limites pour les valeurs aberrantes
upper_bound <- Q3 + 1.5 * IQR
lower_bound <- Q1 - 1.5 * IQR
# Suppression des valeurs aberrantes
cereales4 <- cereales4[cereales4$qtty_achat_kg >= lower_bound
& cereales4$qtty_achat_kg <= upper_bound, ]
dim(cereales4) #  Ca quitte de 11114 obs au depart à 9495 quand on enleve les valeurs manquantes puis à 8031 lorsque l'on supprime les valeurs aberrantes
install.packages("shiny")
library("shiny")
library(haven)
library(dplyr)
library(labelled)
s00_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s00_me_SEN2018.dta")
s01_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s01_me_SEN2018.dta")
s06_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s06_me_SEN2018.dta")
s00_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s00_me_SEN2018.dta")
education_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s02_me_SEN2018.dta")
employment_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s04_me_SEN2018.dta")
income_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s05_me_SEN2018.dta")
head(education_data)
head(employment_data)
head(income_data)
head(s00_me_SEN2018)
View(education_data)
View(employment_data)
View(income_data)
View(s00_me_SEN2018)
s00_me_SEN2018 <- as_factor(s00_me_SEN2018)
employment_data <- as_factor(employment_data)
income_data <- as_factor(income_data)
education_data <- as_factor(education_data)
names(education_data)
names(s00_me_SEN2018)
names(income_data)
names(employment_data)
str(education_data)
library(labelled)
var_label(education_data)
var_label(s00_me_SEN2018)
var_label(income_data)
var_label(employment_data)
library(haven)
library(dplyr)
library(labelled)
s00_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s00_me_SEN2018.dta")
education_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s02_me_SEN2018.dta")
employment_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s04_me_SEN2018.dta")
income_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s05_me_SEN2018.dta")
housing_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s11_me_SEN2018.dta")
View(housing_data)
str(housing_data)
housing_data <- as_factor(housing_data)
var_label(housing_data)
var_label(income_data)
income_data <- as_factor(income_data)
var_label(income_data)
View(income_data)
employment_data <- as_factor(employment_data)
View(employment_data)
var_label(employment_data)
education_data <- as_factor(education_data)
var_label(education_data)
install.packages("Hmisc")
install.packages("esquisse")
# Appel des packages
library(haven)
library(dplyr)
library(labelled)
library(esquisse)
library(Hmisc)
# IMPORTATION DES BASES DE DONNEES
s00_me_SEN2018 <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s00_me_SEN2018.dta")
education_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s02_me_SEN2018.dta")
employment_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s04_me_SEN2018.dta")
non_wage_income_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s05_me_SEN2018.dta")
housing_data <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s11_me_SEN2018.dta")
Caract_socio_demo <- read_dta("E:/ISEP 2/MON DOSSIER/SEMESTRE 2/TRAITEMENTS STATISTIQUES AVEC R/PROJET DE R/Fichiers_Menage&Individus/s01_me_SEN2018.dta")
# Convertir les variables étiquetées en facteurs
s00_me_SEN2018 <- as_factor(s00_me_SEN2018)
employment_data <- as_factor(employment_data)
non_wage_income_data <- as_factor(non_wage_income_data)
education_data <- as_factor(education_data)
housing_data <- as_factor(housing_data)
Caract_socio_demo <- as_factor(Caract_socio_demo)
# Visualiser les bases
View(education_data)
View(employment_data)
View(non_wage_income_data)
View(s00_me_SEN2018)
View(Caract_socio_demo)
View(housing_data)
# Voir les variables de chacune des bases de données
var_label(education_data)
var_label(s00_me_SEN2018)
var_label(non_wage_income_data)
var_label(employment_data)
var_label(housing_data)
var_label(Caract_socio_demo)
# Calcul du revenu total hors_emploi des menages
revenu_cols <- c("s05q02", "s05q04", "s05q06", "s05q08", "s05q10", "s05q12", "s05q14")
non_wage_income_data <- non_wage_income_data %>%
rowwise() %>%
mutate(sum_rev_tot1 = sum(c_across(all_of(revenu_cols)), na.rm = TRUE))
label(non_wage_income_data$sum_rev_tot1) <- "Total des revenus hors emploi pour les 12 derniers mois"
# Somme des depenses scolaires
revenu_cols2 <- c("s02q20","s02q21","s02q22","s02q23","s02q24","s02q25","s02q26","s02q27" )
education_data <- education_data %>%
rowwise() %>%
mutate(depenses_edu= sum(c_across(all_of(revenu_cols2)), na.rm = TRUE))
label(education_data$depenses_edu) <- "Total des dépenses scolaires pour l'année scolaire 2017/18"
# Code pour calculer le salaire annuel des menage suivant unité et la source de revenus
# Sélectionner les colonnes pertinentes pour les revenus des emplois
employment_data2 <- employment_data
revenu_cols <- c("s04q43", "s04q45", "s04q47", "s04q60", "s04q62", "s04q64")
unite_cols <- c("s04q43_unite", "s04q45_unite", "s04q47_unite", "s04q60_unite", "s04q62_unite", "s04q64_unite")
# Conversion des montants en revenus annuels
conversion_annuelle <- function(montant, unite) {
case_when(
unite == "MOIS" ~ montant * 12,
unite == "TRIMESTRE" ~ montant * 4,
unite == "SEMAINE" ~ montant * 52,  # Supposant qu'il y a 52 semaines dans une année
unite == "AN" ~ montant,
TRUE ~ montant  # Garder le montant tel quel si l'unité est manquante ou non reconnue
)
}
# Appliquer la conversion et calculer le revenu annuel total
for (i in seq_along(revenu_cols)) {
employment_data2[[revenu_cols[i]]] <- conversion_annuelle(employment_data2[[revenu_cols[i]]], employment_data2[[unite_cols[i]]])
}
label(employment_data2$s04q43) <- "Salaire annuel de l'activité principal"
label(employment_data2$s04q45) <- "Primes associées à l'emploi principal"
label(employment_data2$s04q47) <- "Avantages associés à l'emploi principal"
label(employment_data2$s04q60) <- "Salaire annuel de l'activité secondaire"
label(employment_data2$s04q62) <- "Primes associées à l'emploi secondaire"
label(employment_data2$s04q64) <- "Avantages associés à l'emploi secondaire"
# Selection des variables qui vont me servir dans chacune des bases
s00_me_SEN2018 <- s00_me_SEN2018 %>%
select(grappe, menage, s00q00, s00q01, s00q02, s00q04)
housing_data <- housing_data %>%
select(grappe, menage, s11q34, s11q46)
employment_data2 <- employment_data2 %>%
select(grappe, menage, s01q00a, s04q02, s04q28a, s04q29d, s04q37, s04q39, s04q43, s04q45, s04q47, s04q60, s04q62, s04q64)
non_wage_income_data <- non_wage_income_data %>%
select(grappe, menage, s01q00a,sum_rev_tot1 )
Caract_socio_demo <- Caract_socio_demo %>%
select(grappe, menage, s01q00a,s01q01,s01q07,s01q14,s01q25,s01q27,s01q32,s01q34 )
education_data <- education_data %>%
select(grappe, menage, s01q00a,s02q01__1,s02q02__1,s02q03,s02q05,s02q06,s02q12,s02q13,s02q14,s02q15,s02q16,s02q17,s02q18__1,s02q18__2,s02q18__3,s02q18__4,s02q18__5,s02q18__6,s02q18__7,s02q18__8,s02q18__9,s02q17,s02q19,s02q29,s02q30,s02q31,s02q33,depenses_edu)
# FUSIONNONS LES BASES
Final_data <- s00_me_SEN2018 %>%
left_join(housing_data, by = c("grappe", "menage"))%>%
left_join(Caract_socio_demo, by = c("grappe", "menage"))%>%
left_join(employment_data2, by = c("grappe", "menage", "s01q00a"))%>%
left_join(non_wage_income_data, by = c("grappe", "menage", "s01q00a"))%>%
left_join(education_data, by = c("grappe", "menage", "s01q00a"))
View(Final_data)
#var_label(Final_data)
### TRAITEMENT DES VALEURS ABERRANTES ET MANQUANTES
# Comptons le nombre de valeurs manquantes pour chacune des variables
sapply(Final_data, function(x) sum(is.na(x)))
### TRAITEMENT DES VALEURS ABERRANTES
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Salaire annuel de l'activité principal"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(Q1 = quantile(s04q43, 0.25, na.rm = TRUE),
Q3 = quantile(s04q43, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q43, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q43, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))) %>%
mutate(s04q43 = ifelse(s04q43 > seuilmax | s04q43 < seuilmin , 0.1, s04q43))
Final_data <- Final_data %>% group_by(s04q29d) %>%
mutate(median_s04q43 = median(s04q43[s04q43 != 0.1], na.rm = TRUE),
s04q43 = ifelse(s04q43==0.1, median_s04q43, s04q43)) %>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q43)
summary(Final_data$s04q43)
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Avantages associés à l'emploi secondaire"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(Q1 = quantile(s04q64, 0.25, na.rm = TRUE),
Q3 = quantile(s04q64, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q64, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q64, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))) %>%
mutate(s04q64 = ifelse(s04q64 > seuilmax | s04q64 < seuilmin , 0.1, s04q64))
Final_data <- Final_data %>% group_by(s04q29d) %>%
mutate(median_s04q64 = median(s04q64[s04q64 != 0.1], na.rm = TRUE),
s04q64 = ifelse(s04q64==0.1, median_s04q64, s04q64))%>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q64)
summary(Final_data$s04q64)
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Primes associées à l'emploi secondaire"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(Q1 = quantile(s04q62, 0.25, na.rm = TRUE),
Q3 = quantile(s04q62, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q62, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q62, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))) %>%
mutate(s04q62 = ifelse(s04q62 > seuilmax | s04q62 < seuilmin , 0.1, s04q62))
Final_data <- Final_data %>% group_by(Final_data$s04q29d) %>%
mutate(median_s04q62 = median(s04q43[s04q62 != 0.1], na.rm = TRUE),
s04q62 = ifelse(s04q62==0.1, median_s04q62, s04q62))%>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q62)
summary(Final_data$s04q62)
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Salaire annuel de l'activité secondaire"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(Q1 = quantile(s04q60, 0.25, na.rm = TRUE),
Q3 = quantile(s04q60, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q60, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q60, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))) %>%
mutate(s04q60 = ifelse(s04q60 > seuilmax | s04q60 < seuilmin , 0.1, s04q60))
Final_data <- Final_data %>% group_by(Final_data$s04q29d) %>%
mutate(median_s04q60 = median(s04q60[s04q60 != 0.1], na.rm = TRUE),
s04q60 = ifelse(s04q60==0.1, median_s04q60, s04q60))%>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q60)
summary(Final_data$s04q60)
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Primes associées à l'emploi principal"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(
Q1 = quantile(s04q45, 0.25, na.rm = TRUE),
Q3 = quantile(s04q45, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q45, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q45, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))
) %>%
mutate(
s04q45 = ifelse(s04q45 > seuilmax | s04q45 < seuilmin , 0.1, s04q45)
)
Final_data <- Final_data %>% group_by(s04q29d) %>%
mutate(median_s04q45 = median(s04q45[s04q45 != 0.1], na.rm = TRUE),
s04q45 = ifelse(s04q45==0.1, median_s04q45, s04q45))%>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q45)
summary(Final_data$s04q45)
# IDENTIFICATION DES VALEURS ABERRANTES pour la variable "Avantages associés à l'emploi principal"
Final_data <- Final_data %>%
group_by(s04q29d) %>%
mutate(
Q1 = quantile(s04q47, 0.25, na.rm = TRUE),
Q3 = quantile(s04q47, 0.75, na.rm = TRUE),
seuilmax = min(max(s04q47, na.rm = TRUE), Q3 + 1.5 * (Q3 - Q1)),
seuilmin = max(min(s04q47, na.rm = TRUE), Q1 - 1.8 * (Q3 - Q1))
) %>%
mutate(
s04q47 = ifelse(s04q47 > seuilmax | s04q47 < seuilmin , 0.1, s04q47)
)
Final_data <- Final_data %>% group_by(s04q29d) %>%
mutate(median_s04q47 = median(s04q47[s04q47 != 0.1], na.rm = TRUE),
s04q47 = ifelse(s04q47==0.1, median_s04q47, s04q47))%>%
select(-Q1, -Q3, -seuilmax, -seuilmin,-median_s04q47)
summary(Final_data$s04q47)
# Calculons la somme des revenus provenant de l'emploi
Final_data <- Final_data %>%
rowwise() %>%
mutate(revenu_emploi = sum(c_across(starts_with("s04q4") | starts_with("s04q6")), na.rm = TRUE))
label(Final_data$revenu_emploi) <- "Total des revenus annuels issus des emplois pour les 12 derniers mois"
Section_1_data == 9999
Final_data == 9999
Final_data <- s00_me_SEN2018 %>%
left_join(housing_data, by = c("grappe", "menage"))%>%
left_join(Caract_socio_demo, by = c("grappe", "menage"))%>%
left_join(employment_data2, by = c("grappe", "menage", "s01q00a"))%>%
left_join(non_wage_income_data, by = c("grappe", "menage", "s01q00a"))%>%
left_join(education_data, by = c("grappe", "menage", "s01q00a"))
View(Final_data)
sapply(Final_data, function(x) sum(is.na(x)))
Final_data[Final_data == 9999] <- NA
sapply(Final_data, function(x) sum(is.na(x)))
install.packages("esquisse")
library(esquisse)
esquisser(employment_data)
esquisser(Final_data)
Final_data <- Final_data %>%
mutate(niveau_instr = s01q25) %>%
filter(!is.na(niveau_instr))
group_by(niveau_instr) %>%
summarise(count = n()) %>%
mutate(niveau = recode(niveau_instr,
"1" = "Aucun",
"2" = "Primaire",
"3" = "Secondaire 1er cycle",
"4" = "Secondaire 2nd cycle",
"5" = "Supérieur",
"6" = "NSP"))
instruction_levels <- Final_data %>%
group_by(niveau_instr) %>%
summarise(count = n()) %>%
mutate(niveau = recode(niveau_instr,
"1" = "Aucun",
"2" = "Primaire",
"3" = "Secondaire 1er cycle",
"4" = "Secondaire 2nd cycle",
"5" = "Supérieur",
"6" = "NSP"))
ggplot(instruction_levels, aes(x = niveau, y = count, fill = niveau)) +
geom_bar(stat = "identity") +
labs(title = "Niveau d'instruction le plus élevé atteint par le père",
x = "Niveau d'instruction",
y = "Nombre d'observations",
fill = "Niveau d'instruction") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("ggplot2")
ggplot(instruction_levels, aes(x = niveau, y = count, fill = niveau)) +
geom_bar(stat = "identity") +
labs(title = "Niveau d'instruction le plus élevé atteint par le père",
x = "Niveau d'instruction",
y = "Nombre d'observations",
fill = "Niveau d'instruction") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(instruction_levels, aes(x = niveau, y = count, fill = niveau)) +
geom_bar(stat = "identity") +
labs(title = "Niveau d'instruction le plus élevé atteint par le père",
x = "Niveau d'instruction",
y = "Nombre d'observations",
fill = "Niveau d'instruction") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readxl)
RATIOS2 <- read_excel("E:/ISEP 2/MON DOSSIER/APPRENTISSAGE DES VACANCES/DOCUMENTS DE STAGE/ECRITURE DE MON RAPPORT DE STAGE/MEMOIRE PROPREMENT DIT/BASE DE DONNEES/BASE A FUSIONNER 2/RATIOS2.xlsx")
View(RATIOS2)
summary(RATIOS2)
# Extraire les colonnes numériques uniquement
RATIOS2_numeric <- RATIOS2 %>% select(where(is.numeric))
correlation_matrix <- cor(RRATIOS2, use = "complete.obs") # Ignorer les valeurs manquantes
# Calcul de la matrice de corrélation
correlation_matrix <- cor(RATIOS2, use = "complete.obs") # Ignorer les valeurs manquantes
print(correlation_matrix)
install.packages("ggcorrplot")
library(ggcorrplot)
# Visualisation avec ggcorrplot
ggcorrplot(correlation_matrix, lab = TRUE, lab_size = 3)
# Visualiser la matrice de corrélation à l'aide de ggcorrplot
ggcorrplot(correlation_matrix,
lab = TRUE,       # Afficher les valeurs de corrélation sur la carte
lab_size = 3,     # Taille des labels
colors = c("red", "white", "blue"), # Choix des couleurs pour la carte
title = "Matrice de Corrélation des Ratios",  # Titre du graphique
hc.order = TRUE)  # Option pour réorganiser les variables par hiérarchie
# Standardiser les variables (si ce n'est pas déjà fait)
RATIOS2_scaled <- scale(RATIOS2)
# Réaliser l'ACP
pca <- prcomp(RATIOS2_scaled, center = TRUE, scale. = TRUE)
# Calculer les valeurs propres
eigenvalues <- pca$sdev^2
# Calculer la variance expliquée et la variance cumulative
explained_variance <- eigenvalues / sum(eigenvalues)  # Proportion de variance expliquée
cumulative_variance <- cumsum(explained_variance)  # Variance cumulative
# Créer un tableau des résultats
pca_summary <- data.frame(
Composante = 1:length(eigenvalues),
Valeur_propre = eigenvalues,
Variance_expliquee = explained_variance,
Variance_cumulative = cumulative_variance
)
# Afficher le tableau des résultats
print(pca_summary)
# Graphique de la variance expliquée par chaque composante
library(ggplot2)
ggplot(pca_summary, aes(x = Composante, y = Variance_expliquee)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Variance expliquée par chaque composante",
x = "Composante Principale",
y = "Proportion de Variance Expliquée") +
theme_minimal()
# Contributions des variables aux axes principaux
contributions <- pca$rotation^2  # Contribution au carré pour chaque variable et chaque composante
# Convertir en tableau
contributions_df <- as.data.frame(contributions)
contributions_df$Variable <- rownames(contributions_df)
# Afficher les contributions des variables aux axes
print(contributions_df)
# Graphique des contributions des variables à la première composante principale
ggplot(contributions_df, aes(x = reorder(Variable, -PC1), y = PC1)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Contributions des variables à la 1ère composante principale",
x = "Variable", y = "Contribution à la 1ère composante") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Graphique des contributions des variables à la deuxième composante principale
ggplot(contributions_df, aes(x = reorder(Variable, -PC2), y = PC2)) +
geom_bar(stat = "identity", fill = "salmon") +
labs(title = "Contributions des variables à la 2ème composante principale",
x = "Variable", y = "Contribution à la 2ème composante") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
n <- 10
sum_formula <- paste0("\\sum_{i=1}^{", n, "} i = ", n * (n + 1) / 2)
cat("$$", sum_formula, "$$")
valeurs <- c(4, 8, 15, 16, 23, 42)
moyenne <- mean(valeurs)
cat("$$\\bar{x} = ", moyenne, "$$")
valeurs <- c(4, 8, 15, 16, 23, 42)
moyenne <- mean(valeurs)
cat("la moyenne est ", moyenne.)
valeurs <- c(4, 8, 15, 16, 23, 42)
moyenne <- mean(valeurs)
cat("la moyenne est ", moyenne, ".")
# Définir les valeurs
m <- 2 # masse en kg
c <- 3e8 # vitesse de la lumière en m/s
E <- m * c^2
# Afficher la formule avec le résultat calculé
cat("La formule de la théorie de la relativité est : \n")
cat("$$E = mc^2$$\n")
cat(sprintf("En remplaçant m = %d kg et c = %.1e m/s, on obtient :\n", m, c))
cat(sprintf("$$E = %d \\times (%.1e)^2 = %.2e \\, J.$$", m, c, E))
valeurs <- c(4, 8, 15, 16, 23, 42)
moyenne <- mean(valeurs)
cat("La moyenne est $\\bar{x} = ", moyenne, "$.\n")
# Définir les valeurs
m <- 2 # masse en kg
c <- 3e8 # vitesse de la lumière en m/s
E <- m * c^2
# Afficher la formule avec le résultat calculé
cat("La formule de la théorie de la relativité est : \n")
cat("$$E = mc^2$$\n")
cat(sprintf("En remplaçant m = %d kg et c = %.1e m/s, on obtient :\n", m, c))
cat(sprintf("$$E = %d \\times (%.1e)^2 = %.2e \\, J.$$", m, c, E))
history(max.show = Inf)  # Affiche tout l'historique de la session
savehistory("recovered_script.R")  # Sauvegarde dans un fichier
# Dans la console R
file.edit("~/.Rhistory")  # Affiche l'historique des commandes
history(max.show = Inf)
install.packages("sdcMicro")
library (sdcMicro, readxl, tidyverse, haven)
library (sdcMicro)
library (readxl)
library (tidyverse)
library(haven)
sdcApp()
library (sdcMicro)
install.packages("sdcMicro")
library(sdcMicro)
sdcApp()
# Étape 1 : Préparation des données
donnees_filtrees <- ships %>%
filter(!is.na(SPEED), SPEED > 0, !is.na(ship_type))
setwd("E:/ISEP 2/MON DOSSIER/APPRENTISSAGE DES VACANCES/ISEP3/ME _ SEMESTRE 2/PROJET STATISTIQUE SOUS R ET PYTHON/GITHUB EXPOSE/Calcul_parall-le_surR_T6/IMAGE RMD")
